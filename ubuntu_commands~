BASH - основы

cd 

$ cd / = переместиться в корневую директорию — /
pwd = чтобы узнать в каком месте файловой системы в данный момент вы находитесь
cd = чтобы перейти в домашнюю директорию

~ = специальное имя, указывающее в bash на домашнюю директорию пользователя.
\$ ./myprog ~/myfile.txt

ls

ls -a = все файлы, включая скрытые
ls -l = права на файл, имя владельца, время последнего изменения файла и его размер

ls -l /usr
lrwxrwxrwx    1 root     root            9 Dec 22 20:57 doc -> share/doc

Вторая колонка показывает количество ссылок на каждый элемент списка (количество ссылок на инод). 
Третья и четвертая колонки — владелец и группа файла соответственно.
Последняя колонка — имя файла или директории (Если это ссылка, то после знака '–>' стоит имя объекта на который она ссылается).

'-d' = посмотреть информацию только о директориях

\$ ls -dl /usr /usr/bin /usr/X11R6/bin ../share

'-R' = позволяет выводить информацию о файлах находящихся в директории рекурсивно.

ls -R

'-i' =  используется для вывода инодов каждого объекта файловой системы.
Каждый объект файловой системы (файл, директория...) имеет свой уникальный номер, называемый инодом (inode number)

\$ ls -i /usr

 1409 X11R6        314258 i686-linux           43090 libexec        13394 sbin


mkdir

$ mkdir tic tac toe - создание трех новых директорий

По умолчанию команда mkdir не может создать вложенной структуры директорий.

'-p' = разрешает создавать вложенные структуры
\$ mkdir -p easy/as/pie


touch = обновляет время последнего доступа к файлу, или создает новый пустой файл, если его ещё нету.

Чтобы записать строку в файл, перенаправим в него вывод команды echo.
Если файла с таким именем не существует, он будет создан автоматически.

\$ echo "firstfile" > copyme

cat = вывода содержимого файла на терминал

cp = копия файла
Первый — имя уже существующего файла ('copyme'), второй — название новой копии, которую мы хотим сделать ('copiedme').
\$ cp copyme copiedme

mv = переименование (перемещение) файла (номер иноды не меняется)
\$ mv copiedme movedme

myfile.txt будет перемещен в home/user (номер иноды меняется)
\$ mv /var/tmp/myfile.txt /home/user

Чтобы переместить одновременно несколько файлов 
\$ mv /var/tmp/myfile1.txt /var/tmp/myfile2.txt /home/user

'-v' =  на экран будет выведен отчет о проделанной операции:

\$ mv -vt /home/user /var/tmp/myfile1.txt /var/tmp/myfile2.txt
   '/var/tmp/myfile1.txt' -> '/home/user/myfile1.txt'
   '/var/tmp/myfile2.txt' -> '/home/user/myfile2.txt'

Жесткие ссылки.
Каждый инод может иметь несколько связанных с ним жестких ссылок.
Понятия «жёсткая ссылка на файл» и «имя файла» являются синонимами. 
Новые жесткие ссылки на файл можно сделать при помощи команды 'ln'
Жесткие ссылки можно создавать только на файлы, но не на директории.

\$ cd /tmp
\$ touch firstlink
\$ ln firstlink secondlink
\$ ls -i firstlink secondlink
  15782 firstlink    15782 secondlink


Символические ссылки (симлинки)
Симлинк это специальный вид файла, который ссылается на другой файл по имени, а не напрямую на инод.
Если файл удалить, то симлинк на него станет нерабочим (или битым) (что-то типа ярлыка в windows).

Симлинки создаются командой ln с опцией '-s':
\$ ln -s secondlink thirdlink
\$ ls -l firstlink secondlink thirdlink
-rw-rw-r--    2 agriffis agriffis        0 Dec 31 19:08 firstlink
-rw-rw-r--    2 agriffis agriffis        0 Dec 31 19:08 secondlink
lrwxrwxrwx    1 agriffis agriffis       10 Dec 31 19:39 thirdlink -> secondlink

- У симлинков в первой колонке стоит буква 'l' (первая буква английского слова link–ссылка), 
- размер симлинка равен количеству букв в имени файла на который он ссылается ('secondlink' в нашем случае), 
- Последняя колонка помимо имени ссылки содержит имя файла на который она ссылается после знака –>

'rm' - удаление файлов
rm file1 file2

'rmdir' - удаление директории
'rm -rf' - удаление директории со всем содержимым

Права доступа к файлам и каталогам

-rwxr-xr-x 1 root root 49940 Sep 12 1999 /bin/ls
-rwxr-xr-x - эти символы можно условно разделить на 4 группы.

Первая группа - состоит из одного символа:
- = — обычный файл;
d = — каталог;
b = — файл блочного устройства;
c = — файл символьного устройства;
s = — доменное гнездо (socket);
p = — именованный канал (pipe);
l = — символическая ссылка (link).

Далее следуют три группы по три символа. 
2 группа - определяют права доступа к файлу соответственно для владельца файла
3 группа - для группы пользователей
4 группа - для всех остальных пользователей системы.

(r) = читать файл 
(w) = производить запись в этот файл
(x) = запускать на выполнение
(-) = у пользователя нет соответствующего права

Для изменения прав доступа к файлу используется команда 'chmod'. 

r = 4,  w = 2, x = 1. (4+2+1=7).
[user]$ chmod 760 file_name

sudo mkdir -m 777 /var/www/test_rabbit/js2

sudo gedit /etc/apache2/apache2.conf

find /var/www/test_rabbit -type f -exec chmod 777 {} \;
chmod 777 /home/pk/www/ -R
sudo chmod 777 /home/pk/www/test_rabbit -R


sudo chmod 777 /var/www/html/test_rabbit -R

sudo mkdir -m 777 /var/www/html/logs

sudo chmod -R 777 /var/www/html/
